;;; straight-bench.el --- How fast is straight.el? -*- lexical-binding: t -*-

(require 'benchmark)
(require 'cl-lib)

(defvar straight-bench-this-dir
  (file-name-directory
   (expand-file-name
    (or load-file-name buffer-file-name)))
  "Directory containing straight-bench.el.")

(defvar straight-bench-package-list
  '(eg
    fabric
    extmap
    ruby-end
    preseed-generic-mode
    crystal-mode
    ob-applescript
    esh-help
    dired-open
    grandshell-theme
    org-wild-notifier
    mpmc-queue
    elvish-mode
    all-the-icons-gnus
    dtrt-indent
    elisp-sandbox
    supergenpass
    prescient
    easy-kill
    eglot
    latex-pretty-symbols
    proc-net
    number
    bibliothek
    org-tfl
    ac-ispell
    verb
    switch-buffer-functions
    meta-presenter
    status
    vertica-snippets
    evil-iedit-state
    treemacs-projectile
    fstar-mode
    pipenv
    ob-nim
    hl-sentence
    gsettings
    helm-growthforecast
    rubocop
    flymake-vnu
    jinja2-mode
    flatfluc-theme
    calendar-norway
    julia-snail
    upbo
    ac-math
    git-backup-ivy
    markdownfmt
    shx
    ac-clang
    ac-js2
    markdown-mode+
    pyim
    helm-sly
    ac-geiser
    roy-mode
    berrys-theme
    neon-mode
    nix-env-install
    auto-read-only
    gntp
    nlinum-relative
    plain-theme
    sorcery-theme
    kakapo-mode
    lean-mode
    helm-R
    helm-directory
    lexbind-mode
    php-mode
    tramp-hdfs
    habamax-theme
    bbdb-
    russian-holidays
    mediawiki
    grayscale-theme
    helm-migemo
    cmd-to-echo
    realgud-byebug
    read-aloud
    simplenote
    vi-tilde-fringe
    multiple-cursors
    zotelo
    whitaker
    smart-shift
    connection
    web-mode-edit-element
    monokai-theme
    horizon-theme
    devdocs
    jaword
    flycheck-ocaml
    celery
    system-packages
    copy-file-on-save
    git
    xml+
    atcoder-tools)
  "List of packages to install in benchmark.
Generated by picking 100 random packages from MELPA (you can get
a listing from the URL
<https://melpa.org/packages/archive-contents>).")

(cl-defun straight-bench-time (&key init-form emacs-dir graphical)
  (unless emacs-dir
    (error "No :emacs-dir given"))
  (let ((init-file (expand-file-name "init.el" emacs-dir)))
    (when init-form
      (delete-directory emacs-dir 'recursive)
      (make-directory emacs-dir 'parents)
      (with-temp-file init-file
        (print `(progn
                  (run-with-idle-timer
                   0 nil
                   (lambda ()
                     (when (fboundp #'straight--transaction-finalize)
                       (straight--transaction-finalize))
                     (kill-emacs)))
                  (setq user-emacs-directory ',emacs-dir)
                  ,init-form)
               (current-buffer))))
    (ignore-errors
      (kill-buffer "*straight-bench*"))
    (benchmark-elapse
      (let* ((process-environment
              (cons
               "TERM=eterm"
               process-environment))
             (proc
              (make-process
               :name "straight-bench"
               :command
               `("emacs" "-Q" "-l" ,init-file
                 ,@(unless graphical
                     '("-nw")))
               :noquery t
               :buffer "*straight-bench*"
               :connection-type 'pty)))
        (while (process-live-p proc)
          (accept-process-output proc))))))

(cl-defun straight-bench-run
    (&key package-manager install graphical num-packages
          inhibit-find shallow &allow-other-keys)
  "Run a single benchmark to see how fast a package manager is.
This does different things depending on the keyword arguments.

Firstly, PACKAGE-MANAGER is either `package' or `straight'.

INSTALL non-nil means to delete all downloaded packages, and
install from scratch. INSTALL nil, on the other hand, means to
assume packages are already downloaded, and just benchmark how
long startup takes.

GRAPHICAL non-nil means start a graphical Emacs frame. GRAPHICAL
nil means start a tty frame.

NUM-PACKAGES is the number of packages to install. Defaults to
everything in `straight-bench-package-list'.

INHIBIT-FIND nil means do the find(1) command at straight.el
startup to check for package modifications (the default).
INHIBIT-FIND non-nil means disable it. (Normally you'd enable
live modification checking in this case, but that's irrelevant
here since there's no performance impact, so we don't bother.)

SHALLOW non-nil means tell straight.el to use shallow clones.
SHALLOW nil means use the default behavior of full clones."
  (let ((packages (cl-subseq straight-bench-package-list
                             0 num-packages)))
    (pcase package-manager
      (`package
       (straight-bench-time
        :init-form
        (when install
          `(progn
             (require 'package)
             (package-initialize)
             (add-to-list 'package-archives
                          '("melpa" . "https://melpa.org/packages/"))
             (let ((refreshed nil))
               (dolist (package ',packages)
                 (unless (package-installed-p package)
                   (unless refreshed
                     (package-refresh-contents)
                     (setq refreshed t))
                   (package-install package))))))
        :emacs-dir (expand-file-name "emacsd/package" straight-bench-this-dir)
        :graphical graphical))
      (`straight
       (straight-bench-time
        :init-form
        (when install
          `(progn
             (setq straight-repository-branch "develop")
             ,@(when inhibit-find
                 '((setq straight-check-for-modifications nil)))
             ,@(when shallow
                 '((setq straight-vc-git-default-clone-depth 1)))
             (defvar bootstrap-version)
             (let ((bootstrap-file
                    (expand-file-name
                     "straight/repos/straight.el/bootstrap.el"
                     user-emacs-directory))
                   (bootstrap-version 5))
               (unless (file-exists-p bootstrap-file)
                 (with-current-buffer
                     (url-retrieve-synchronously
                      (concat
                       "https://raw.githubusercontent.com"
                       "/raxod502/straight.el/develop/install.el")
                      'silent 'inhibit-cookies)
                   (goto-char (point-max))
                   (eval-print-last-sexp)))
               (load bootstrap-file nil 'nomessage))
             (mapcar #'straight-use-package ',packages)))
        :emacs-dir (expand-file-name "emacsd/straight" straight-bench-this-dir)
        :graphical graphical))
      (`nil
       (straight-bench-time
        :init-form '(message "Hello world")
        :emacs-dir (expand-file-name "emacsd/base" straight-bench-this-dir)
        :graphical graphical)))))

(defvar straight-bench-test-plan
  '(("base Emacs startup"
     :reps 100)
    ("package.el (install)"
     :package-manager package
     :install t
     :reps 5)
    ("straight.el (install)"
     :package-manager straight
     :install t
     :reps 5)
    ("straight.el (install, shallow)"
     :package-manager straight
     :install t
     :shallow t
     :reps 5)
    ("package.el (startup)"
     :package-manager package
     :reps 100)
    ("straight.el (startup)"
     :package-manager straight
     :reps 100)
    ("straight.el (startup, no find)"
     :package-manager straight
     :inhibit-find t
     :reps 100))
  "The sequence of tests that will be run by `straight-bench-run-plan'.")

(defun straight-bench-run-plan ()
  "Run all the tests in `straight-bench-test-plan'."
  (let ((results nil))
    (dolist (elt straight-bench-test-plan)
      (let ((name (car elt))
            (props (cdr elt))
            (times nil))
        (dotimes (_ (plist-get props :reps))
          (push (apply #'straight-bench-run props) times))
        (push (cons name times) results)))
    results))

(defun straight-bench-batch ()
  (message "This function is not yet implemented"))

(provide 'straight-bench)

;;; straight-bench.el ends here
